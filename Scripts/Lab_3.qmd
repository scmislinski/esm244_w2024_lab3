---
title: "Lab 3"
author: "Samantha Mislinski"
format: 
  html:
    code-fold: show #shows code
    toc: true #table of contents 
    number-sections: true 
    embed-resources: true #Imbeds all of the images and graphs into the final html. Makes it self contained IMPORTANT FOR HW
editor: visual
execute:
  echo: true
  message: false
  warning: false
---

## Libraries for this Lab

```{r}
library(tidyverse)
library(here)
library(broom)

##### Spatial data packages sf and tmap
library(sf)
library(tmap)
```

# Overview: Spatial data wrangling and visualization

In this week's lecture, we learned a bit about projection and coordinate reference systems, types of spatial data, and investigating spatial autocorrelation using *variograms*. In this first part of lab we'll practice working with spatial data, then move on to variograms and spatial interpolation in the next part. We'll look at point pattern analysis (exploring spatial clustering) next week.

Today, we'll use vector data (polygons, points) to practice reading in spatial data, checking & updating the CRS, and doing some wrangling and visualization.

We'll use several datasets:

-   California County shapefile (ca_counties_tiger_2016.shp) from the US Census Bureau's 2016 MAF/TIGER database (accessed [here](https://data.ca.gov/dataset/ca-geographic-boundaries/resource/b0007416-a325-4777-9295-368ea6b710e6?inner_span=True))
-   Read sesbania records (invasive species) from the CA DFW (accessed [here](https://map.dfg.ca.gov/metadata/ds0080.html))

## Load Data

# California county outlines (polygons)

## Read it in with `read_sf`

First, let's read in the California county shapefile: vector data 
*look into read_sf function it's new* reads it in as a simple feature?
*only read in the folder in this code. All the shape files need to have the same name!*
```{r}
ca_counties_raw_sf <- read_sf(here("data", "ca_counties", "CA_Counties_TIGER2016.shp"))
```

## Do a bit of wrangling (and see sticky geometry!)

Use `View(ca_counties)` to check out what it contains. Let's simplify it by first converting area to km^2^ instead of m^2^, then only keeping county name and area. 
The geomitry colume stayed 

```{r}
ca_counties_sf <- ca_counties_raw_sf %>% 
  janitor::clean_names() %>%
  mutate(land_km2 = aland / 1e6) %>% #Changes the land into km2 instead of m2
  select(county = name, land_km2)

ca_counties_df <- ca_counties_sf %>% # to remoce the geometry
  as.data.frame() %>%
  select(-geometry)
head(ca_counties_sf)
```

## check the CRS
Use `st_crs()` to check the existing CRS for spatial data. We see that this CRS is "pseudo-mercator" based on WGS 84 - primarily used for web mapping, not analysis. WGS84 (epsg:3857), also note proj4 string and WKT definitions.
*look for the ID at the very bottom*
for rasters to show proj4 string
```{r}
ca_counties_sf %>% st_crs()
ca_counties_sf %>% terra::crs() ### to show proj4 string
```

## Explore it visually

Plot the California counties using `geom_sf()`. Notice that we can update aesthetics just like we would for a regular ggplot object. Here, we update the color based on land area (and change the color gradient).
simple plot
```{r}
plot(ca_counties_sf)
plot(ca_counties_sf %>% select(land_km2))
```

## ggplot 
geom_sf simple features object 
```{r}
ggplot(data = ca_counties_sf) +
  geom_sf(aes(fill = land_km2), color = "white", size = 0.2) +
  theme_void() +
  scale_fill_gradientn(colors = c("cyan","blue","purple")) #the gradient portion does a gradient out of three colores
```

Notice what aesthetics we *didn't* have to specify here?

`geom_sf` knows to look for a column called `geometry` (or sometimes `geom`).

# Invasive red sesbania records (spatial points) an invasive species

Read sesbania (*Sesbania punicea*) is an invasive plant (see more information from the [California Invasive Plants Council](https://www.cal-ipc.org/plants/profile/sesbania-punicea-profile/)). Observations for locations of invasive red sesbania are from CA DFW. See metadata and information here: https://map.dfg.ca.gov/metadata/ds0080.html

*reading in some points!* 
```{r}
#| eval: false
#| include: false

### Note that the original data includes a County column.  Let's drop that for
### lab just to avoid confusion, along with lat/long (we already have geometry).
### Let's also convert to a .gpkg to show another good vector file type.

####### reads in the data 
sesbania_sf <- read_sf(here('data/red_sesbania/ds80_for_lab.gpkg'))  #gpkg bundles a bunch of stuff. Tends to be a smaller file size than the bundled version
```

#Making a map and plotting data together by county
### the analysis:
Let's say we want to find the count of red sesbania observed locations in this dataset *by county*. We then want to create a map of all CA counties using fill color to indicate sesbania counts.




## Transform CRS so records match counties

Notice that this CRS is different from the California counties CRS, so we'll want to update it to match. Use `st_transform()` to update the CRS:
transform plant records over to county records 
st_transforms a reference to a different one 
```{r}
### if you know the EPSG code:
sesbania_3857_sf <- st_transform(sesbania_sf, 3857)
### if you don't know the EPSG code:
sesbania_3857_2_sf <- st_transform(sesbania_sf, st_crs(ca_counties_sf))

# Then check it: 
sesbania_3857_sf %>% st_crs()
```


Cool, now they have the same CRS.

### Plot them together!
```{r}
ggplot() + # not putting the data into the first ()
  geom_sf(data = ca_counties_sf) +
  geom_sf(data = sesbania_3857_sf, size = 1, color = "red")
```

## Spatial join for joing the county boundries and th plant data

How can I go about joining these data so that I can find counts? Don't worry...`st_join()` has you covered for spatial joins!
```{r}
ca_sesb_sf <- st_join(ca_counties_sf, sesbania_3857_sf) 

sesb_ca_sf <- st_join(sesbania_3857_sf, ca_counties_sf)


```

## sumarize by county
choropleth: an irregular map

```{r}
sesb_counts_sf <- ca_sesb_sf %>%
  group_by(county) %>%
  summarize(n_records = sum(!is.na(ID)))

ggplot() +
  geom_sf(data = sesb_counts_sf, aes(fill = n_records), color = 'black', size = 1.5)+
  scale_fill_gradientn(colors = c('white', 'blue', 'navy'))+
  theme_minimal()+
  labs(fill = 'Number of S. punicea records')
```


So we see that we can still use our usual wrangling skills! Let's do a bit more for fun, just to prove that our existing wrangling skills still work with spatial data - the spatial information just sticks to it! 
Only plot the county with the greatest number of red sesbania records, and make a map of those locations (yeah there are many ways to do this).


```{r}
county_max <- sesb_counts_sf %>%
  filter(n_records == max(n_records)) %>%
  pull(county) #

### we appended the county names to Sesbania records earlier:
solano_sesb_sf <- sesb_ca_sf %>% 
  filter(county %in% county_max) ### what if two counties had the same max value? use %in% insted of ==

# Only keep Solano polygon from California County data
solano_sf <- ca_counties_sf %>% 
  filter(county %in% county_max)

ggplot() +
  geom_sf(data = solano_sf) +
  geom_sf(data = solano_sesb_sf, color = 'red')
```


# Making an interactive map with `tmap`

Sometimes we'll want to make a map interactive so that audience members can zoom in, explore different areas, etc. We can use the `tmap` package to create an interactive map. Let's make one for our California counties (fill aesthetic by land area) with the red sesbania locations on top:
*good for interactive maps in shinny*
```{r}
#| eval: false ### the interactive map makes the HTML huge
#| echo: true

# Set the viewing mode to "interactive":
tmap_mode(mode = "view") #turn on the interactive viewer when used

# Then make a map (with the polygon fill color updated by variable 'land_km2', updating the color palette to "BuGn"), then add another shape layer for the sesbania records (added as dots):
tm_shape(ca_counties_sf) +
  tm_fill("land_km2", palette = "BuGn") + #blue to green
  tm_shape(sesbania_sf) + #tmap will transform the corrdenate reference 
  tm_dots()
```










